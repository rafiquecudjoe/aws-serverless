org: rafiqueacudjoe
app: test-weather-functions
service: test-weather-functions

frameworkVersion: '2 || 3'

plugins:
  - serverless-offline

useDotenv: true

package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - "!**/.vscode/**"
    - "!**/package-lock.json"
    - "!node_modules/aws-sdk/**"

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  region: eu-central-1
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: "*"

    # - Effect: Allow
    #   Action:
    #     - AWSLambdaVPCAccessExecutionRole
    #   Resource: "*"

  custom:
    env:
    dev:
      debug: true
      HOST: redis://weather-001.yo10re.0001.use1.cache.amazonaws.com
      PORT: 6379
      
    prod:
      debug: true
      HOST: redis://weather-001.yo10re.0001.use1.cache.amazonaws.com
      PORT: 6379



functions:
  # lambda to get weather details
  testWeather:
    handler: lambdas/openweather/index.handler
    description: express lambda open weather test
    environment:
      DEBUG: ${self:custom.env.${opt:stage}.debug}
      MONGODB_CONNECTION_STRING: ${self:custom.env.${opt:stage}.mongo-uri}
      WEB3_PROVIDER_RPC: ${self:custom.env.${opt:stage}.web3-provider-rpc}
      REDIS_HOST: ${self:custom.env.${opt:stage}.HOST}
      REDIS_PORT: ${self:custom.env.${opt:stage}.PORT}
     
    package:
      patterns:
        - '!**/lambdas'
        - '**/lambdas/openweather/**'
    events:
      - httpApi: '*'

